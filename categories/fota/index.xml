<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fota on Foundries.io</title><link>https://foundries.io/categories/fota/</link><description>Recent content in Fota on Foundries.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Aug 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://foundries.io/categories/fota/index.xml" rel="self" type="application/rss+xml"/><item><title>Adding a REST API to OTA Connect</title><link>https://foundries.io/insights/2018/08/09/ota-api/</link><pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate><guid>https://foundries.io/insights/2018/08/09/ota-api/</guid><description>&lt;p&gt;The &lt;a href=&#34;https://foundries.io/insights/2018/07/12/ota-part-4/&#34;&gt;OTA blog series&lt;/a&gt; left users with a secured
OTA Connect server. This article will describe how you can deploy
an easy-to-use REST API to manage your devices.&lt;/p&gt;</description></item><item><title>Securing OTA Connect</title><link>https://foundries.io/insights/2018/07/12/ota-part-4/</link><pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate><guid>https://foundries.io/insights/2018/07/12/ota-part-4/</guid><description>&lt;p&gt;&lt;a href=&#34;https://foundries.io/insights/2018/06/27/ota-part-3/&#34;&gt;Part three&lt;/a&gt; of this blog series showed how to
deploy an OTA Connect service in Google Kubernetes Engine that had
a few security holes. This article will describe how to secure it.&lt;/p&gt;</description></item><item><title>Deploying OTA Connect</title><link>https://foundries.io/insights/2018/06/27/ota-part-3/</link><pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate><guid>https://foundries.io/insights/2018/06/27/ota-part-3/</guid><description>&lt;p&gt;Continuing with the OTA blog series &lt;a href=&#34;https://foundries.io/insights/2018/05/25/ota-part-1/&#34;&gt;part one&lt;/a&gt; and &lt;a href=&#34;https://foundries.io/insights/2018/06/14/ota-part-2/&#34;&gt;part two&lt;/a&gt;, this article shows you how to deploy OTA Connect using the OTA Community Edition into Google&amp;rsquo;s Kubernetes Engine (GKE). After completion of these instructions, you&amp;rsquo;ll have an OTA Connect server available on the internet with a single QEMU device registered to it.&lt;/p&gt;</description></item><item><title>What Is OTA Connect</title><link>https://foundries.io/insights/2018/06/14/ota-part-2/</link><pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate><guid>https://foundries.io/insights/2018/06/14/ota-part-2/</guid><description>&lt;p&gt;Continuing with the &lt;a href=&#34;https://foundries.io/insights/2018/05/25/ota-part-1/&#34;&gt;OTA blog series&lt;/a&gt;, this article will explain what &lt;a href=&#34;https://github.com/advancedtelematic/ota-community-edition&#34;&gt;OTA Connect&lt;/a&gt; is and how it implements the TUF/Uptane/OSTree specifications.&lt;/p&gt;</description></item><item><title>How We Chose a Software Update System</title><link>https://foundries.io/insights/2018/05/25/ota-part-1/</link><pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate><guid>https://foundries.io/insights/2018/05/25/ota-part-1/</guid><description>&lt;p&gt;One of the first big decisions we had to make for the Linux microPlatform was our Over-The-Air Update (OTA) strategy. This decision required a lot of time, meetings, beer, and coffee. This article is the first of a small series explaining our recommended approach to OTA for the LMP. This article explains how and why we ultimately chose &lt;a href=&#34;https://www.here.com/en/products-services/here-automotive-suite/ota-software-management/here-ota-connect&#34;&gt;OTA Connect&lt;/a&gt; and its open source deployment project &lt;a href=&#34;https://github.com/advancedtelematic/ota-community-edition&#34;&gt;OTA Community Edition&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Zephyr microPlatform, Zephyr OTA via DFU/mcumgr</title><link>https://foundries.io/insights/2018/04/17/20180417-mcumgr-dfu/</link><pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate><guid>https://foundries.io/insights/2018/04/17/20180417-mcumgr-dfu/</guid><description>&lt;p&gt;In this blog we describe how to use the Zephyr microPlatform and the in-tree
Zephyr samples to build, flash and perform an over the air (OTA) update of a
Zephyr application over Bluetooth Low Energy (BLE). This demonstration uses the
DFU support within Zephyr provided by
&lt;a href=&#34;http://docs.zephyrproject.org/subsystems/mgmt.html&#34;&gt;mcumgr&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Linux microPlatform, now with OTA updates (beta)</title><link>https://foundries.io/insights/2018/04/11/20180411-over-the-air/</link><pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate><guid>https://foundries.io/insights/2018/04/11/20180411-over-the-air/</guid><description>&lt;p&gt;Starting with Linux microPlatform update 0.13, we are including support for over-the-air (OTA) updates.&lt;/p&gt;</description></item><item><title>Using your own firmware signing keys with MCUBoot</title><link>https://foundries.io/insights/2018/01/17/20180117-mcuboot-keys/</link><pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate><guid>https://foundries.io/insights/2018/01/17/20180117-mcuboot-keys/</guid><description>&lt;p&gt;Secure firmware over the air (FOTA) updates are a key &lt;a href=&#34;https://foundries.io/products/&#34;&gt;Zephyr microPlatform&lt;/a&gt; feature. This post explains how to use your own firmware signing key pair to secure the boot process on your devices.&lt;/p&gt;</description></item></channel></rss>